import Head from "next/head";
import { useState, useEffect } from "react";
import axios from "axios";
import styles from "@/styles/Home.module.css";
import cst from "../styles/index.module.css";

export default function Home() {
  const [images, setImages] = useState([]);
  const [query, setQuery] = useState("");
  const [history, setHistory] = useState("");
  const [localStorageData, setLocalStorageData] = useState([]);
  const [searchHistory, setSearchHistory] = useState(false);
  const [loader, setLoader] = useState(false);
  // Function to fetch images based on query
  const fetchImages = async () => {
    try {
      setLoader(true);
      const response = await axios.get("/api/pexels", { params: { query } });
      const photos = response.data.photos || [];
      console.log(photos);
      if (photos.length != 0) {
        setImages(photos);
        setHistory(query);
        localStorage.setItem(`key${query}`, query); // Store query in localStorage
        setLoader(false);
        setSearchHistory(false);
      } else {
        setImages([]);
      }
    } catch (err) {
      console.error("Error Occurred:", err);
      setImages([]);
      setLoader(false);
    }
  };
  useEffect(() => {
    if ((query.length != 0 || query != "") && searchHistory == true) {
      fetchImages();
    }
  }, [query])
  // useEffect to store query in localStorage when history changes
  useEffect(() => {
    if (query.trim() !== "") {
      localStorage.setItem(`key${query}`, query);
    }
  }, [history]);

  // useEffect to load localStorage data once on initial page load
  useEffect(() => {
    const loadLocalStorageData = () => {
      const keys = Object.keys(localStorage);
      const queries = keys.filter(key => key.includes("key")).map(key => localStorage.getItem(key));
      setLocalStorageData(queries);
    };
    loadLocalStorageData();
  }, []); // Empty dependency array ensures it runs only once on mount

  // useEffect to adjust grid layout based on image load
  useEffect(() => {
    const adjustGridLayout = () => {
      const allImages = document.querySelectorAll('.imageContainer img');
      allImages.forEach(image => {
        image.addEventListener('load', () => {
          const height = image.getBoundingClientRect().height;
          const rowSpan = Math.ceil(height / 10); // Adjust based on the grid-auto-rows value
          image.parentElement.style.setProperty('--row-span', rowSpan);
        });
      });
    };
    adjustGridLayout();
  }, []);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${cst.main}`}>
        <div className={cst.sideBar}>
          {/* Rendering saved queries */}
          {localStorageData.map((data, index) => (
            <div key={index} className={cst.hs_button} onClick={() => { setQuery(data); setSearchHistory(true) }}>
            <b> {data} </b> 
            </div>
          ))}
        </div>
        <div className={cst.mainpanel}>
          <nav className={cst.nav}>
            <input
              type="text"
              value={query}
              onChange={(e) => setQuery(e.target.value)}
              placeholder="Enter image type"
              className={cst.inputBox}
            />
            <button className={cst.button_36} onClick={fetchImages}>
              Get Images
            </button>
            {loader &&
              <div className={cst.loader}></div>
}
          </nav>
          <div className={cst.board}>
            {/* Rendering fetched images */}
            {images.length == 0 && <center><p className={cst.p}>No Result Found</p></center>}
            {images.map((image) => (
              <div
                key={image.id}
                className={cst.imageContainer}
                style={{ gridRowEnd: `span ${Math.ceil((image.height / image.width) * 10)}` }}
              >
                <img
                  src={image.src.portrait}
                  alt={image.alt}
                  className={cst.image}
                  style={{ boxShadow: `0px 0px 10px ${image.avg_color}` }}
                />
                <b className={cst.title}>{image.alt} - By {image.photographer}</b>
              </div>
            ))}
          </div>
        </div>
      </main>
    </>
  );
}
